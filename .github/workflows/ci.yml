name: CI Pipeline

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      vault:
        image: hashicorp/vault:1.15
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        options: >-
          --cap-add=IPC_LOCK
        #command: server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8200 # Comentado para command del servicio Vault en el workflow de CI para máxima compatibilidad con GitHub Actions

    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_password

    steps:
      # 1️⃣ Clonar repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ BACKEND (Go)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install backend dependencies
        working-directory: backend
        run: go mod tidy

      - name: Build backend
        working-directory: backend/cmd/server
        run: go build -v .


      - name: Test backend with coverage
        id: backend_tests
        working-directory: backend
        run: |
          go test ./... -v -coverprofile=coverage.out
          go tool cover -func=coverage.out | tee coverage.txt
          COV=$(grep total: coverage.txt | awk '{print $3}')
          echo "backend_coverage=$COV" >> $GITHUB_ENV

      - name: Esperar a que Vault esté listo
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8200/v1/sys/health | grep '"initialized":true'; then
              echo "Vault está listo" && exit 0
            fi
            sleep 2
          done
          echo "Vault no respondió a tiempo" && exit 1

      - name: Crear secreto en Vault
        run: |
          export VAULT_ADDR='http://localhost:8200'
          export VAULT_TOKEN='root'
          vault kv put secret/mediapp JWT_SECRET_KEY=supersecreto123

      - name: Ejecutar tests de integración (Vault)
        run: go test -tags=integration ./internal/config
        working-directory: ./backend

      # 3️⃣ FRONTEND (Node.js)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Test frontend with coverage
        id: frontend_tests
        working-directory: frontend
        run: |
          npm test -- --coverage --watchAll=false
          COV=$(grep 'All files' coverage/lcov-report/index.html | grep -o '[0-9]\+%' | head -n 1)
          echo "frontend_coverage=$COV" >> $GITHUB_ENV

      # 4️⃣ Notificación a Discord (incluye cobertura)
      - name: Notify Discord
        if: always()
        run: |
          STATUS="✅ Build exitoso"
          COLOR=3066993
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="❌ Build falló"
            COLOR=15158332
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"username\": \"GitHub Actions\",
                 \"embeds\": [{
                   \"title\": \"CI Pipeline - $STATUS\",
                   \"color\": $COLOR,
                   \"fields\": [
                     {\"name\": \"Repositorio\", \"value\": \"${{ github.repository }}\"},
                     {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\"},
                     {\"name\": \"Autor\", \"value\": \"${{ github.actor }}\"},
                     {\"name\": \"Cobertura Backend\", \"value\": \"$backend_coverage\"},
                     {\"name\": \"Cobertura Frontend\", \"value\": \"$frontend_coverage\"}
                   ],
                   \"footer\": {\"text\": \"GitHub Actions\"}
                 }]
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mediapp-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - mediapp-network
    environment:
      - NODE_ENV=production

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mediapp-backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    networks:
      - mediapp-network
    depends_on:
      database:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENV=production
      - APP_ENV=${APP_ENV:-production}

  database:
    image: postgres:16-alpine
    container_name: mediapp-database
    environment:
      POSTGRES_USER: mediapp_user
      POSTGRES_PASSWORD: mediapp_password_2024
      POSTGRES_DB: mediapp_db
    ports:
      - "5432:5432"
    healthcheck: # <-- El bloque de verificaciÃ³n de salud que necesitas
      test: ["CMD-SHELL", "pg_isready -U mediapp_user -d mediapp_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mediapp-network

  vault:
    image: hashicorp/vault:1.15
    container_name: mediapp-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    command: server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8200
    networks:
      - mediapp-network

  sonarqube:
    image: sonarqube:community
    container_name: mediapp-sonarqube
    depends_on:
      - database
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://database:5432/mediapp_db
      - SONAR_JDBC_USERNAME=mediapp_user
      - SONAR_JDBC_PASSWORD=mediapp_password_2024
    ports:
      - "9000:9000"
    networks:
      - mediapp-network

volumes:
  db_data:

networks:
  mediapp-network:
    driver: bridge